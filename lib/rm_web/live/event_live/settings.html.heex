<.breadcrumbs
  class="mb-4"
  season={@season}
  region={@region}
  league={@local_league || @first_league}
  event={@event}
/>

<RMWeb.EventLive.Util.event_nav
  class="mb-8"
  event={@event}
  league={@local_league || @first_league}
  region={@region}
  season={@season}
  user={@current_user}
  view={@socket.view}
/>

<.title>Settings for {@event.name}</.title>

<.card spaced>
  <.form
    class="mt-2"
    id="event-settings-general-form"
    for={@event_settings_form}
    phx-change="event_settings_change"
    phx-submit="event_settings_submit"
  >
    <.switch
      explanation="Marking an event as virtual will hide the physical address and venue name from public view."
      field={@event_settings_form[:virtual]}
      label="Virtual Event"
      wrapper="mb-4"
    />

    <.switch
      explanation={
        if @event.type in [:league_meet, :kickoff, :workshop, :demo, :volunteer],
          do: "Awards are unavailable for this type of event.",
          else:
            "If enabled, teams can submit URLs for video award submissions. Submissions will become visible to everyone after the deadline."
      }
      disabled={@event.type in [:league_meet, :kickoff, :workshop, :demo, :volunteer]}
      field={@event_settings_form[:video_submission]}
      label="Accept video award submissions"
      wrapper="mb-4"
    />

    <%= if @event_settings_form[:video_submission].value in [true, "true"] do %>
      <.input
        explanation={"Video award submissions will be due at 11:59pm local time on this date. A common choice is 7 days before the event ends. Event is #{format_range(@event.date_start, @event.date_end)}."}
        field={@event_settings_form[:video_submission_date]}
        label="Video award submission due date"
        required
        type="date"
        wrapper="mb-4 pl-10"
      />

      <.input
        explanation="The default (registered teams) is appropriate for most events. A different pool of teams can be used if registration is not enabled in Region Manager."
        field={@event_settings_form[:video_submission_pool]}
        label="Which teams can submit video awards?"
        options={award_pool_options(@event)}
        type="select"
        wrapper="pl-10 mb-4"
      />
    <% else %>
      <.input field={@event_settings_form[:video_submission_date]} type="hidden" value="" />
      <.input field={@event_settings_form[:video_submission_pool]} type="hidden" value="" />
    <% end %>

    <p class="text-right">
      <.button disabled={@event_settings_success} type="submit">
        Update Settings <.icon :if={@event_settings_success} class="h-4 w-4" name="hero-check" />
      </.button>
    </p>
  </.form>
</.card>

<.title>Registration Settings</.title>

<.card spaced>
  <p class="mb-4 text-sm">
    The following settings affect how teams register for this event.
    Default values are chosen based on the league settings at the time an event is first imported.
  </p>

  <.form
    id="event-settings-registration-form"
    for={@registration_settings_form}
    phx-change="registration_settings_change"
  >
    <.inputs_for :let={f} field={@registration_settings_form[:registration]}>
      <.switch
        explanation="If disabled, you will need to find another way to track event registration. Please check with your region's Program Delivery Partner before making changes."
        field={f[:enabled]}
        label="Teams can register for this event in Region Manager"
        wrapper="mb-4"
      />

      <div :if={f[:enabled].value}>
        <.input
          explanation={
            if @event.type in [:league_meet, :league_tournament],
              do: "This event is restricted to league teams by FIRST.",
              else: "There may be restrictions on this setting enforced by FIRST."
          }
          disabled={@event.type in [:league_meet, :league_tournament]}
          field={f[:pool]}
          label="Which teams can sign up for this event?"
          options={registration_pool_options(@event)}
          type="select"
          wrapper="pl-10 mb-6"
        />

        <.input
          explanation={"Registration will open at 00:01 local time on #{safe_subtract_date(@event.date_start, f[:open_days].value)}."}
          field={f[:open_days]}
          label={"How many days before #{format_date(@event.date_start, :date)} should registration open?"}
          max="180"
          min="2"
          step="1"
          type="number"
          wrapper="pl-10 mb-6"
        />

        <.input
          explanation={"Registration will close at 23:59 local time on #{safe_subtract_date(@event.date_start, f[:deadline_days].value)}."}
          field={f[:deadline_days]}
          label={"How many days before #{format_date(@event.date_start, :date)} should registration close?"}
          max="60"
          min="0"
          step="1"
          type="number"
          wrapper="pl-10 mb-6"
        />

        <div class="mb-6">
          <.switch
            explanation="Use this only if the event or venue has restricted capacity. It is not necessary to use this setting to restrict non-league teams from signing up."
            id="league_registration_registration_team_limit_enable"
            label="Restrict the number of teams that can register for this event"
            name="event_settings[registration][team_limit_enable]"
            value={not is_nil(f[:team_limit].value)}
            wrapper="mb-2"
          />

          <.input
            :if={not is_nil(f[:team_limit].value)}
            field={f[:team_limit]}
            min="0"
            step="1"
            type="number"
            wrapper="pl-10"
          />
        </div>

        <.switch
          explanation="Depending on the settings, this allows teams to sign up for a waitlist after the event reaches capacity, after the deadline has passed, or if they are not eligible."
          id="league_registration_registration_waitlist_limit_enable"
          label="Teams can sign up for a waitlist"
          name="event_settings[registration][waitlist_limit_enable]"
          value={not is_nil(f[:waitlist_limit].value)}
          wrapper="mb-4"
        />

        <div :if={not is_nil(f[:waitlist_limit].value)}>
          <.input
            explanation={
              if @event.type in [:league_meet, :league_tournament],
                do: "This event is restricted to league teams by FIRST.",
                else: "There may be restrictions on this setting enforced by FIRST."
            }
            disabled={@event.type in [:league_meet, :league_tournament]}
            field={f[:waitlist_pool]}
            label="Which teams can sign up for the waitlist?"
            options={registration_pool_options(@event)}
            type="select"
            wrapper="pl-10 mb-6"
          />

          <.input
            explanation={"Waitlist will close at 23:59 local time on #{format_date(Date.add(@event.date_start, -1 * (f[:waitlist_deadline_days].value || 0)), :date)}."}
            field={f[:waitlist_deadline_days]}
            label={"How many days before #{format_date(@event.date_start, :date)} should the waitlist close?"}
            max="60"
            min="0"
            step="1"
            type="number"
            wrapper="pl-10 mb-6"
          />
        </div>
      </div>
    </.inputs_for>
  </.form>
</.card>
