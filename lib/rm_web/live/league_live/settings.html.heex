<.breadcrumbs class="mb-4" season={@season} region={@region} league={@local_league} />

<RMWeb.LeagueLive.Util.league_nav
  class="mb-8"
  season={@season}
  region={@region}
  league={@local_league}
  user={@current_user}
  view={@socket.view}
/>

<.title>
  Default Registration Settings
  <button phx-click={show_modal("registration-settings-info")}>
    <.icon class="bottom-0.5 h-4 relative text-gray-600 w-4" name="hero-question-mark-circle" />
  </button>
</.title>

<.card spaced>
  <p class="mb-4 text-sm">
    Changes made here do not affect existing proposals or published events.
  </p>

  <.form
    for={@registration_settings_form}
    phx-change="registration_settings_change"
    phx-submit="registration_settings_submit"
  >
    <.inputs_for :let={f} field={@registration_settings_form[:registration]}>
      <.switch
        explanation="When enabled, teams can register for events here in Region Manager. If disabled, you will need to find another way to track event registration. Please check with your region's Program Delivery Partner before making changes."
        field={f[:enabled]}
        label="Teams can register for events in Region Manager"
        wrapper="mb-4"
      />

      <div :if={f[:enabled].value}>
        <.input
          explanation="For hybrid events with start dates before team activities begin, it may be necessary to make event-specific adjustments to the deadline."
          field={f[:deadline_days]}
          label="How many days before the start of an event should registration close?"
          max="60"
          min="0"
          step="1"
          type="number"
          wrapper="pl-10 mb-6"
        />

        <.input
          explanation="For hybrid events with start dates before team activities begin, it may be necessary to make event-specific adjustments to the deadline."
          field={f[:open_days]}
          label="How many days before the start of an event should registration open?"
          max="90"
          min="2"
          step="1"
          type="number"
          wrapper="pl-10 mb-6"
        />

        <.switch
          explanation="This option is most often set on a per-event basis. It is not necessary to use this setting to restrict non-league teams from signing up for league events."
          id="league_registration_registration_team_limit_enable"
          label="Restrict the number of teams that can register for an event"
          name="league_settings[registration][team_limit_enable]"
          value={not is_nil(f[:team_limit].value)}
          wrapper="mb-4"
        />

        <div :if={not is_nil(f[:team_limit].value)}>
          <.input field={f[:team_limit]} min="0" step="1" type="number" wrapper="pl-10 mb-6" />

          <.switch
            explanation="This enables registration for a waitlist after the event reaches capacity."
            id="league_registration_registration_waitlist_limit_enable"
            label="Teams can sign up for a waitlist"
            name="league_settings[registration][waitlist_limit_enable]"
            value={not is_nil(f[:waitlist_limit].value)}
            wrapper="mb-4"
          />

          <div :if={not is_nil(f[:waitlist_limit].value)}>
            <.input
              explanation="Teams will be presented in the order in which they signed up."
              field={f[:waitlist_limit]}
              label="How many additional teams can sign up to the wailist?"
              min="0"
              step="1"
              type="number"
              wrapper="pl-10 mb-6"
            />

            <.input
              explanation="For hybrid events with start dates before team activities begin, it may be necessary to make event-specific adjustments to the deadline."
              field={f[:waitlist_deadline_days]}
              label="How many days before the start of an event should the waitlist close?"
              max="60"
              min="0"
              step="1"
              type="number"
              wrapper="pl-10 mb-6"
            />
          </div>
        </div>
      </div>
    </.inputs_for>
    <p class="text-right">
      <.button disabled={@registration_settings_success} type="submit">
        Update Defaults
        <.icon :if={@registration_settings_success} class="h-4 w-4" name="hero-check" />
      </.button>
    </p>
  </.form>
</.card>

<%= if can?(@current_user, :league_add_user, @local_league) do %>
  <.title>
    League Administrators
    <:action>
      <.button phx-click={show_modal("league-add-user-modal")}>Add...</.button>
    </:action>
  </.title>

  <.card flush spaced>
    <.list>
      <:item
        :for={assignment <- @local_league.user_assignments}
        class="flex items-center px-4 py-2 relative"
      >
        <div class="grow">
          <p class="flex gap-2 items-center">
            <span class="font-semibold">
              <%= if assignment.user do %>
                {assignment.user.profile.name}
              <% else %>
                <em>Unregistered User</em>
              <% end %>
            </span>

            <%= case assignment.permissions do %>
              <% %{users: true} -> %>
                <.tag class="bg-emerald-100 border-emerald-300">All Permissions</.tag>
              <% %{events: true, contact: true} -> %>
                <.tag class="bg-orange-100 border-orange-300">Events & Contacts</.tag>
              <% %{events: true, contact: false} -> %>
                <.tag class="bg-orange-100 border-orange-300">Events Only</.tag>
              <% %{events: false, contact: true} -> %>
                <.tag class="bg-orange-100 border-orange-300">Contacts Only</.tag>
              <% %{events: false, contact: false} -> %>
                <.tag class="bg-rose-100 border-rose-300">No Permissions</.tag>
            <% end %>
          </p>
          <p class="text-sm">{assignment.email}</p>
        </div>

        <div>
          <button
            class="leading-none ml-2 p-1 rounded text-neutral-800 transition-colors hover:bg-neutral-200"
            phx-click="remove_user_init"
            phx-value-assignment={assignment.id}
          >
            <.icon name="hero-trash" />
          </button>
        </div>
      </:item>
    </.list>
    <p :if={length(@local_league.user_assignments) == 0} class="italic px-4 py-2 text-sm">
      This league currently has no administrators assigned.
    </p>
  </.card>
<% end %>

<.modal id="event-proposal-info">
  <.title class="mb-4" flush>Event Proposal Info</.title>

  <p class="mb-4">
    Region and league administrators can propose events in <strong>Region Manager</strong>.
  </p>
  <p class="mb-4">
    In order for these events to become official, they must be submitted to and approved by <em>FIRST</em>.
    This can take some time, and certain events cannot be submitted until after the season kickoff.
  </p>
  <p>
    Once an event is published, <strong>Region Manager</strong>
    will link the published data back to the original proposal.
    Event proposals in <strong>Region Manager</strong>
    allow administrators to provide additional information to attendees beyond what is available from <em>FIRST</em>.
  </p>
</.modal>

<.modal id="registration-settings-info">
  <.title class="mb-4" flush>About Registration Settings</.title>

  <p class="mb-4">
    When enabled, teams can register for events in <strong>Region Manager</strong>.
  </p>
  <p class="mb-4">
    These <em>default registration settings</em>
    will be copied to all new event proposals. Individual proposals and published events can customize their registration settings if necessary.
    Published league events that do not have corresponding event proposals will copy these settings the first time they are imported from <em>FIRST</em>.
  </p>
  <p class="mb-4">
    The following settings are available:
  </p>
  <ul class="list-disc pl-8">
    <li>Enable or disable registration for events</li>
    <li>Restrict the period of time when teams can register</li>
    <li>Restrict the number of teams that can register</li>
    <li>Allow teams to register for a waitlist</li>
  </ul>
</.modal>

<.modal id="league-add-user-modal">
  <.title class="mb-4" flush>Add League Administrator</.title>
  <p class="mb-4">
    League administrators are entrusted with the <em>Personally Identifiable Information</em>
    (including names, addresses, and email addresses) of team coaches and mentors.
  </p>

  <.form for={@add_user_form} phx-change="add_user_change" phx-submit="add_user_submit">
    <.input
      field={@add_user_form[:email]}
      label="Administrator's Email"
      placeholder="person@example.com"
      required
      type="email"
      wrapper="mb-4"
    />

    <.inputs_for :let={p} field={@add_user_form[:permissions]}>
      <h3 class="font-semibold leading-6 mb-2 text-sm text-zinc-800">Permissions</h3>
      <.switch
        explanation="Add additional users as league administrators"
        field={p[:users]}
        label="User can add other administrators"
        wrapper="mb-4"
      />
      <.switch
        disabled={Phoenix.HTML.Form.normalize_value("checkbox", p[:users].value)}
        explanation="Manage saved venue information, propose events, and propose changes to existing events"
        field={p[:events]}
        label="User can propose events"
        value={
          Phoenix.HTML.Form.normalize_value("checkbox", p[:users].value) ||
            Phoenix.HTML.Form.normalize_value("checkbox", p[:events].value)
        }
        wrapper="mb-4"
      />
      <.switch
        disabled={Phoenix.HTML.Form.normalize_value("checkbox", p[:users].value)}
        explanation="View contact information for team lead coaches and mentors"
        field={p[:contact]}
        label="User can view team contact information"
        value={
          Phoenix.HTML.Form.normalize_value("checkbox", p[:users].value) ||
            Phoenix.HTML.Form.normalize_value("checkbox", p[:contact].value)
        }
        wrapper="mb-4"
      />
    </.inputs_for>

    <p class="text-right">
      <button
        class="rounded border border-orange-500 font-semibold leading-6 py-1 px-2 text-orange-500"
        phx-click={hide_modal("league-add-user-modal")}
      >
        Cancel
      </button>
      <.button class="ml-2" type="submit">Add Administrator</.button>
    </p>
  </.form>
</.modal>

<.modal id="league-remove-user-modal">
  <.title class="mb-4" flush>Remove League Administrator</.title>
  <p :if={@remove_user} class="mb-4">
    Are you sure you want to remove <strong><%= if @remove_user.user, do: @remove_user.user.profile.name, else: @remove_user.email %></strong>?
    They will immediately lose access to league information and actions.
  </p>
  <p class="text-right">
    <button
      class="phx-submit-loading:opacity-75 rounded border border-orange-500 font-semibold leading-6 py-1 px-2 text-orange-500"
      phx-click="remove_user_cancel"
    >
      Cancel
    </button>
    <.button class="ml-2" phx-click="remove_user_submit">Remove</.button>
  </p>
</.modal>
